Problem 1: Design an In-Memory Distributed Queue like Kafka/RabbitMQ/SQS

Requirements:
A distributed queue is a set of queues that are called under a single  name so they appear to be a single,
 logical destination to a client, when the members of the set are actually distributed across multiple servers within a cluster.

1. The queue should be in-memory and should not require access to the file system/data store.
2. There can be multiple topics in the queue.
3. A message (type = String ) can be published on a topic by a producer/publisher and consumers/subscribers can
subscribe to the topic to receive the messages.
4. There can be multiple producers and consumers.
5. A producer can publish to multiple topics.
6. A consumer can listen to multiple topics.
7. The consumer should print "<consumer_id> received <message>" on receiving the message.
8. The queue system should be multi-threaded, i.e., messages can be produced or consumed in parallel by different producers/consumers.

Input/Output Format:
You DO NOT need to provide input from the command-line.
Create 2 topics: Topic1 and Topic2.
Create 2 producers: Producer1 and Producer2.
Create 5 consumers: Consumer1, Consumer2, Consumer3, Consumer4, and Consumer5.
Make all 5 consumers subscribe to Topic1.
Make consumers 1, 3, and 4 subscribe to Topic2.
Make producer1 publish message "Message 1" to Topic1
Make producer1 publish message "Message 2" to Topic1
Make producer2 publish message "Message 3" to Topic1
Make producer1 publish message "Message 4" to Topic2
Make producer2 publish message "Message 5" to Topic2